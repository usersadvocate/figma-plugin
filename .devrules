# Linter Project Development Rules

## üéØ Rule #1: Build and Problem Resolution

**Status: ACTIVE** | **Priority: CRITICAL**

### After Every Code Change:

1. **Build the project**
   ```bash
   npm run build
   ```
2. **Run linting** and fix issues
   ```bash
   npx eslint src/main.ts --fix
   ```
3. **Verify compilation** - no TypeScript errors
4. **Test in Figma** - reload plugin and verify functionality

### Manual Checks:

- [ ] All TypeScript compilation errors resolved
- [ ] All ESLint errors fixed (warnings acceptable if documented)
- [ ] Plugin loads successfully in Figma
- [ ] Core functionality works as expected

---

## üèóÔ∏è Rule #2: Code Quality Standards

**Status: ACTIVE** | **Priority: HIGH**

### TypeScript Requirements:

- [ ] No `any` types without justification
- [ ] All imports must be used or removed
- [ ] Unused variables prefixed with `_`
- [ ] Functions have proper return types
- [ ] Async functions handle errors with try-catch

### Naming Conventions:

- [ ] Functions: camelCase
- [ ] Interfaces/Types: PascalCase
- [ ] Constants: SCREAMING_SNAKE_CASE
- [ ] Files: kebab-case

### CSS Standards:

- [ ] **Never use `!important` declarations**
- [ ] Use proper CSS specificity instead
- [ ] Use CSS custom properties for maintainable styling

---

## üß™ Rule #3: Testing and Validation

**Status: ACTIVE** | **Priority: HIGH**

### Manual Testing Checklist:

- [ ] Plugin loads without errors in Figma
- [ ] UI renders correctly
- [ ] Section detection works
- [ ] Variable resolution displays correctly
- [ ] Error handling works gracefully
- [ ] Plugin responds within 2 seconds for typical sections

---

## üöÄ Rule #4: Development Workflow

**Status: ACTIVE** | **Priority: HIGH**

### Daily Workflow:

1. **Pull latest changes** from main branch
2. **Make changes** following coding standards
3. **Build and test** (Rule #1)
4. **Commit with clear message**

### Commit Message Format:

```
[type]: Brief description of changes

- Detail 1
- Detail 2
```

**Types:** `feat:`, `fix:`, `docs:`, `style:`, `refactor:`, `test:`, `chore:`

### Git Control:

- [ ] **Do not commit or push until explicitly asked**
- [ ] Wait for user confirmation before any git operations
- [ ] Allow user full control over when changes are committed

---

## üö® Rule #5: Error Handling and Performance

**Status: ACTIVE** | **Priority: HIGH**

### Error Handling:

- [ ] All async operations have try-catch blocks
- [ ] User-facing errors have helpful messages
- [ ] Graceful degradation when features fail

### Performance:

- [ ] Minimize API calls to Figma
- [ ] Use efficient data structures
- [ ] Avoid blocking operations
- [ ] Cache results when appropriate

---

## ‚ö° Rule #6: Forward-Thinking Solutions

**Status: ACTIVE** | **Priority: HIGH**

### Solution Philosophy:

- [ ] **Build forward to new solutions** rather than reverting
- [ ] Use problems as opportunities to improve the codebase
- [ ] Consider how solutions impact future development
- [ ] Address root causes, not just symptoms

### When to Revert (Rare):

- [ ] Critical production bugs needing immediate rollback
- [ ] Security vulnerabilities requiring immediate mitigation
- [ ] Breaking changes affecting dependent systems

---

## üìã Pre-Commit Checklist

**Use this before committing:**

- [ ] **Rule #1**: Build successful and problems resolved
- [ ] **Rule #2**: Code quality standards met
- [ ] **Rule #3**: Basic functionality tested
- [ ] **Rule #4**: Commit message follows format
- [ ] **Rule #6**: Solutions built forward, not reverted
- [ ] No critical security issues
- [ ] No broken functionality

---

## üö® Emergency Rules

**Never break these rules:**

1. **Never** commit broken builds to main branch
2. **Never** expose sensitive user data
3. **Never** remove error handling without replacement
4. **Never** break existing functionality without migration path
5. **Never** ignore critical security vulnerabilities

---

## üîÑ Maintenance (Monthly)

**Status: ACTIVE** | **Priority: LOW**

### Regular Tasks:

- [ ] Update dependencies
- [ ] Test with latest Figma features
- [ ] Clean up unused code
- [ ] Update documentation

---

_These rules are living guidelines and can be updated as the project evolves._
